name: CI - React State (task_0..task_10)

on:
  push:
    branches: ["**"]
    paths:
      - "react_state/task_*/dashboard/**"
      - ".github/workflows/test-react-state.yml"
  pull_request:
    paths:
      - "react_state/task_*/dashboard/**"
      - ".github/workflows/test-react-state.yml"

jobs:
  test:
    name: react_state/task_${{ matrix.task }}/dashboard
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: [0,1,2,3,4,5,6,7,8,9,10]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute path & existence
        id: meta
        run: |
          DIR="react_state/task_${{ matrix.task }}/dashboard"
          echo "dir=$DIR" >> "$GITHUB_OUTPUT"
          if [ -d "$DIR" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip (folder not found)
        if: steps.meta.outputs.exists != 'true'
        run: echo "Skipping ${{ steps.meta.outputs.dir }} (not found)."

      - name: Use Node.js 20
        if: steps.meta.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ steps.meta.outputs.dir }}/package-lock.json

      - name: Install deps
        if: steps.meta.outputs.exists == 'true'
        working-directory: ${{ steps.meta.outputs.dir }}
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      # Optionnel : build si nécessaire
      # - name: Build
      #   if: steps.meta.outputs.exists == 'true'
      #   working-directory: ${{ steps.meta.outputs.dir }}
      #   run: npm run build

      - name: Run tests (with coverage)
        if: steps.meta.outputs.exists == 'true'
        env:
          CI: "true"
          COLUMNS: "120"   # évite un bug possible du reporter Jest
        working-directory: ${{ steps.meta.outputs.dir }}
        run: npm test -- --watchAll=false --coverage

      - name: Upload coverage to Codecov
        if: steps.meta.outputs.exists == 'true'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}           # requis si repo privé
          files: ${{ steps.meta.outputs.dir }}/coverage/lcov.info
          flags: task-${{ matrix.task }}
          fail_ci_if_error: false                       # n’échoue pas la CI si l’upload échoue
